Buffer Overflow
    Meaning
        malloc and pointers
        stack smashing (overwriting or corrupting the return pointers)
            compiler saves the address of memory when we o through a function to return to it after the function is finished. so if we write over the address, we can jump to another different address of the memory and run a bad code!
        adding NoP to memory and then jump, just like an airplane sliding on a long strip (a kind of padding the memory)
            for the smashing problem we can add a series of padding to skip all addresses we think compiler after function will return. so finally, our bad code will run after all compiler jumps to find the next address after Nop padding bytes.
    Why?
        DoS
        ByPassing security
        run code (ex: opening a port or something)
    C/C++ do not automatically check for this
        you can read popular/basic functions code to find a way to break the code and do a Buffer Overflow ;)
        like:
            strcpy can copy data into memory
    check 'code red'
        a famous attack that seen on the July 9, 2001. it successfully attack about 359,000 machines!
    IDS/IPS on Host/Server
        writing code with boundary validation
        having cookies (canary value) in memory and checking them
            putting strange values in different addresses of the memory and checking them during the run time of the program to check if they changed or not ;) to detect memory corruption and stop working.
        stack guard (saving return values and checking them)
            checking the return address the compiler should return to after a function is finished.
        using tools like splint (checking for Buffer Overflow possibilities)
        logs
    on hardware level there are NX (no exec) or XD (exec disabled) flags for memory
        you can set these flags to prevent Buffer Overflow
    heartbleed
        get a root shell!